#!/bin/bash
# Resumen visual del proyecto

clear

echo "╔══════════════════════════════════════════════════════════════════════════════╗"
echo "║                  PROYECTO 3 - SISTEMA DE TWEETS DEL CLIMA                   ║"
echo "║                        GOOGLE KUBERNETES ENGINE                             ║"
echo "╚══════════════════════════════════════════════════════════════════════════════╝"
echo ""
echo "👤 Información del Estudiante"
echo "───────────────────────────────────────────────────────────────────────────────"
echo "  Carnet:            202200129"
echo "  Nombre:            Luis Pablo Manuel García López"
echo "  Municipio:         Chinautla (carnet termina en 9)"
echo "  Fecha:             Octubre 18, 2025"
echo "  Proyecto:          Sistema de Tweets del Clima"
echo "  Estado:            ✅ COMPLETADO Y LISTO"
echo ""
echo "📊 Resumen de Componentes"
echo "───────────────────────────────────────────────────────────────────────────────"
echo "  API REST Rust:            ✅ (Puerto 8080, HPA 1-3 réplicas)"
echo "  Go Deployment 1:          ✅ (gRPC Server + Clients Kafka/RabbitMQ)"
echo "  Kafka:                    ✅ (Topic: weather-tweets, 3 particiones)"
echo "  RabbitMQ:                 ✅ (Queue: weather-tweets)"
echo "  Kafka Consumer:           ✅ (Procesa y almacena en Valkey)"
echo "  RabbitMQ Consumer:        ✅ (Procesa y almacena en Valkey)"
echo "  Valkey (Redis):           ✅ (2 réplicas, persistencia AOF)"
echo "  Grafana:                  ✅ (Dashboard de visualización)"
echo "  NGINX Ingress:            ✅ (Controller)"
echo "  Locust:                   ✅ (Generador de carga: 10K requests)"
echo "  Zot Registry:             ✅ (Container Registry en VM GCP)"
echo ""
echo "📁 Estructura del Proyecto"
echo "───────────────────────────────────────────────────────────────────────────────"
echo "  proyecto3/"
echo "  ├── 📂 proto/              → Protocol Buffers (weather_tweet.proto)"
echo "  ├── 📂 api-rust/           → API REST (Rust + Actix-web)"
echo "  │   ├── src/main.rs        → Servidor HTTP + gRPC Client"
echo "  │   ├── build.rs           → Build script para protobuf"
echo "  │   ├── Cargo.toml         → Dependencias"
echo "  │   └── Dockerfile         → Imagen Docker"
echo "  ├── 📂 go-services/        → Servicios en Go"
echo "  │   ├── deployment1.go     → gRPC Server + Kafka/RabbitMQ Clients"
echo "  │   ├── kafka_writer.go    → Writer para Kafka"
echo "  │   ├── kafka_consumer.go  → Consumer de Kafka"
echo "  │   ├── rabbitmq_sender.go → Sender para RabbitMQ"
echo "  │   ├── rabbitmq_consumer.go → Consumer de RabbitMQ"
echo "  │   ├── go.mod             → Módulo Go"
echo "  │   └── Dockerfiles        → 3 Dockerfiles (deployment1, consumers)"
echo "  ├── 📂 k8s-manifests/      → Kubernetes YAMLs"
echo "  │   ├── 01-namespace.yaml  → Namespace weather-system"
echo "  │   ├── 02-rust-api.yaml   → API Rust + HPA"
echo "  │   ├── 03-go-deployment-1.yaml → Go Server"
echo "  │   ├── 04-consumers.yaml  → Kafka & RabbitMQ Consumers"
echo "  │   ├── 05-valkey.yaml     → StatefulSet 2 réplicas"
echo "  │   ├── 06-kafka.yaml      → Kafka + Zookeeper"
echo "  │   ├── 07-rabbitmq.yaml   → RabbitMQ"
echo "  │   ├── 08-ingress.yaml    → NGINX Ingress"
echo "  │   └── 09-grafana.yaml    → Grafana"
echo "  ├── 📂 locust-config/      → Pruebas de carga"
echo "  │   ├── locustfile.py      → Script para generar carga"
echo "  │   └── requirements.txt   → Dependencias Python"
echo "  ├── 📚 Documentación"
echo "  │   ├── README.md          → Inicio rápido"
echo "  │   ├── TECNICA.md         → Documentación técnica completa"
echo "  │   ├── RESUMEN.md         → Resumen ejecutivo"
echo "  │   ├── EJEMPLOS.md        → Ejemplos de uso"
echo "  │   └── GRAFANA-SETUP.md   → Configuración del dashboard"
echo "  ├── 🔧 Scripts de Automatización"
echo "  │   ├── deploy.sh          → Despliegue automático"
echo "  │   ├── cleanup.sh         → Limpieza del sistema"
echo "  │   ├── build-images.sh    → Compilación de imágenes"
echo "  │   ├── update-registry.sh → Actualizar Zot Registry IP"
echo "  │   ├── monitor.sh         → Monitoreo en tiempo real"
echo "  │   └── make-executable.sh → Hacer scripts ejecutables"
echo "  └── .gitignore            → Archivo de exclusiones"
echo ""
echo "🚀 Inicio Rápido (Pasos)"
echo "───────────────────────────────────────────────────────────────────────────────"
echo "  1. cd proyecto3"
echo "  2. ./update-registry.sh 34.159.50.100:5000  (reemplazar IP Zot)"
echo "  3. ./build-images.sh 34.159.50.100:5000    (compilar imágenes)"
echo "  4. ./deploy.sh                              (desplegar en GKE)"
echo "  5. cd locust-config && locust -f locustfile.py --host=http://INGRESS_IP"
echo ""
echo "📋 Requisitos del Enunciado - Checklist"
echo "───────────────────────────────────────────────────────────────────────────────"
echo "  ✅ Locust generando 10,000 tweets al Ingress"
echo "  ✅ API REST en Rust con HPA (1-3 réplicas, CPU > 30%)"
echo "  ✅ Go Deployment 1 (gRPC Server + Kafka/RabbitMQ Clients)"
echo "  ✅ Kafka Topic: weather-tweets"
echo "  ✅ RabbitMQ Queue: weather-tweets"
echo "  ✅ Kafka Consumer (almacena en Valkey)"
echo "  ✅ RabbitMQ Consumer (almacena en Valkey)"
echo "  ✅ Valkey StatefulSet con 2 réplicas y persistencia"
echo "  ✅ Grafana Dashboard (gráfico de barras por clima)"
echo "  ✅ NGINX Ingress Controller"
echo "  ✅ Zot Registry en VM GCP"
echo "  ✅ OCI Artifact (documentado en TECNICA.md)"
echo "  ✅ Documentación Técnica Completa"
echo "  ✅ Namespace: weather-system"
echo ""
echo "🎯 Flujo de Datos"
echo "───────────────────────────────────────────────────────────────────────────────"
echo "  Locust (10K tweets)"
echo "      ↓ HTTP"
echo "  Ingress NGINX"
echo "      ↓"
echo "  API REST Rust (8080)"
echo "      ↓ gRPC"
echo "  Go Deployment 1 (50051)"
echo "      ├→ Kafka (weather-tweets)"
echo "      │   ↓ Consumer"
echo "      │   Valkey (contadores)"
echo "      │   ↓"
echo "      └→ Grafana Dashboard"
echo "      └→ RabbitMQ (weather-tweets)"
echo "          ↓ Consumer"
echo "          Valkey (contadores)"
echo "          ↓"
echo "          Grafana Dashboard"
echo ""
echo "📊 Dashboard Grafana"
echo "───────────────────────────────────────────────────────────────────────────────"
echo "  Ubicación:  http://grafana.local"
echo "  Usuario:    admin"
echo "  Contraseña: admin123"
echo "  Municipio:  Chinautla"
echo "  Gráfico:    Barras (Conteos por condición climática)"
echo "  Datos:      sunny, cloudy, rainy, foggy"
echo ""
echo "📞 Información de Contacto"
echo "───────────────────────────────────────────────────────────────────────────────"
echo "  Carnet:  202200129"
echo "  Nombre:  Luis Pablo Manuel García López"
echo "  Cluster: proyecto3-sopes-1 (us-central1-c)"
echo "  Proyecto GCP: proyecto-3-475405"
echo ""
echo "🎓 Tecnologías Utilizadas"
echo "───────────────────────────────────────────────────────────────────────────────"
echo "  Cloud:        Google Cloud Platform (GCP)"
echo "  Container:    Kubernetes 1.24+ (GKE)"
echo "  API:          Rust + Actix-web"
echo "  Services:     Go 1.21"
echo "  gRPC:         Protocol Buffers 3"
echo "  Brokers:      Kafka 7.5.0 + RabbitMQ 3.12"
echo "  BD Memoria:   Valkey 7"
echo "  Visualización: Grafana"
echo "  Pruebas:      Locust 2.17+"
echo "  Registry:     Zot"
echo ""
echo "✨ Estado del Proyecto"
echo "───────────────────────────────────────────────────────────────────────────────"
echo "  ✅ COMPLETADO Y LISTO PARA DESPLIEGUE"
echo ""
echo "╔══════════════════════════════════════════════════════════════════════════════╗"
echo "║              Última actualización: Octubre 18, 2025                          ║"
echo "║                  Carnet: 202200129 - Todos los requisitos                   ║"
echo "║                           cumplidos y funcionales                           ║"
echo "╚══════════════════════════════════════════════════════════════════════════════╝"
